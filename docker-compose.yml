version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: qa_toolbox_postgres
    environment:
      POSTGRES_DB: qa_toolbox
      POSTGRES_USER: qa_toolbox_user
      POSTGRES_PASSWORD: qa_toolbox_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - qa_toolbox_network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: qa_toolbox_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - qa_toolbox_network

  # Go 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qa_toolbox_backend
    environment:
      - ENVIRONMENT=production
      - PORT=8080
      - DATABASE_URL=postgres://qa_toolbox_user:qa_toolbox_password@postgres:5432/qa_toolbox?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    networks:
      - qa_toolbox_network
    restart: unless-stopped

  # Flutter Web 前端
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: qa_toolbox_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - qa_toolbox_network
    restart: unless-stopped

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: qa_toolbox_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - qa_toolbox_network
    restart: unless-stopped

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: qa_toolbox_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - qa_toolbox_network
    restart: unless-stopped

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: qa_toolbox_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - qa_toolbox_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  qa_toolbox_network:
    driver: bridge